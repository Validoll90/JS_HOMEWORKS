console.log(a);
var a = 10;
// результатом буде undefind тому що змінна викликана в консоль до присвоєння їй значення

myFunction();

function myFunction() {
  console.log("Hello, world!");
}
// результат "Hello, world!" тому що це function declaration і відповідно ми можемо викликати цю функцію до її написання

console.log(b);
let b = 5;
// результатом буде помилка тому що не можно викликати let змінну перед її оголошенням,  бо до того часу вона знаходиться в "temporal dead zone"

const myArrowFunction = () => {
  console.log("Hello from arrow function");
};

myArrowFunction();
// спрацює коректно і результат буде Hello from arrow function тому що спочатку було оголошення змінної const далі відповідно її результатом записана стрілочна функція і відповідно вже після вона викликана в консоль

//Напишіть власні приклади коду, де:
//
// В одному випадку hoisting призводить до успішного виконання коду.
// В іншому випадку hoisting призводить до помилки. Поясніть, чому сталася помилка.

let a = 3;
let b = 4;
console.log(a + b);
// успішно виконається тому що дотримані правила синтаксису оголошення і присвоєння значень

console.log(b);
let b = "Hello";
// буде помилка через те що змінна викликається до присвоєння їй значення
